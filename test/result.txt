Name: eid
Expr: (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t
typesynth([], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
   typecheck([], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
      typecheck(['l_a], client, λx @ 'l_a. x, ∀ t. t -'l_a-> t)
         typecheck(['l_a, 'a], client, λx @ 'l_a. x, 'a -'l_a-> 'a)
            subloc(['l_a, 'a], 'l_a, 'l_a)
            =['l_a, 'a]
            typecheck(['l_a, 'a, $a : 'a], 'l_a, $a, 'a)
               typesynth(['l_a, 'a, $a : 'a], 'l_a, $a)
               =('a, ['l_a, 'a, $a : 'a])
               subtype(['l_a, 'a, $a : 'a], 'a, 'a)
               =['l_a, 'a, $a : 'a]
            =['l_a, 'a, $a : 'a]
         =['l_a, 'a]
      =['l_a]
   =[]
=(∀ l. ∀ t. t -l-> t, [])
Type: ∀ l. ∀ t. t -l-> t
Context: []

Name: eid_client_unit
Expr: ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client ()
typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client ())
   typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
      typesynth([], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
         typecheck([], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
            typecheck(['l_a], client, λx @ 'l_a. x, ∀ t. t -'l_a-> t)
               typecheck(['l_a, 'a], client, λx @ 'l_a. x, 'a -'l_a-> 'a)
                  subloc(['l_a, 'a], 'l_a, 'l_a)
                  =['l_a, 'a]
                  typecheck(['l_a, 'a, $a : 'a], 'l_a, $a, 'a)
                     typesynth(['l_a, 'a, $a : 'a], 'l_a, $a)
                     =('a, ['l_a, 'a, $a : 'a])
                     subtype(['l_a, 'a, $a : 'a], 'a, 'a)
                     =['l_a, 'a, $a : 'a]
                  =['l_a, 'a, $a : 'a]
               =['l_a, 'a]
            =['l_a]
         =[]
      =(∀ l. ∀ t. t -l-> t, [])
      locapplysynth([], client, ∀ l. ∀ t. t -l-> t, client)
      =(∀ t. t -client-> t, [])
   =(∀ t. t -client-> t, [])
   typeapplysynth([], client, ∀ t. t -client-> t, ())
      typeapplysynth([∃ 'b], client, ∃ 'b -client-> ∃ 'b, ())
         typecheck([∃ 'b], client, (), ∃ 'b)
            typesynth([∃ 'b], client, ())
            =((), [∃ 'b])
            subtype([∃ 'b], (), ∃ 'b)
               instantiateR([∃ 'b], (), 'b)
               =[∃ 'b = ()]
            =[∃ 'b = ()]
         =[∃ 'b = ()]
      =(∃ 'b, [∃ 'b = ()])
   =(∃ 'b, [∃ 'b = ()])
=(∃ 'b, [∃ 'b = ()])
Type: ()
Context: [∃ 'b = ()]

Name: idunit
Expr: ((Λl. λid @ l. id ()) : ∀ l. (() -l-> ()) -l-> ()) client (((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
typesynth([], client, ((Λl. λid @ l. id ()) : ∀ l. (() -l-> ()) -l-> ()) client (((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client))
   typesynth([], client, ((Λl. λid @ l. id ()) : ∀ l. (() -l-> ()) -l-> ()) client)
      typesynth([], client, (Λl. λid @ l. id ()) : ∀ l. (() -l-> ()) -l-> ())
         typecheck([], client, Λl. λid @ l. id (), ∀ l. (() -l-> ()) -l-> ())
            typecheck(['l_a], client, λid @ 'l_a. id (), (() -'l_a-> ()) -'l_a-> ())
               subloc(['l_a], 'l_a, 'l_a)
               =['l_a]
               typecheck(['l_a, $a : () -'l_a-> ()], 'l_a, $a (), ())
                  typesynth(['l_a, $a : () -'l_a-> ()], 'l_a, $a ())
                     typesynth(['l_a, $a : () -'l_a-> ()], 'l_a, $a)
                     =(() -'l_a-> (), ['l_a, $a : () -'l_a-> ()])
                     typeapplysynth(['l_a, $a : () -'l_a-> ()], 'l_a, () -'l_a-> (), ())
                        typecheck(['l_a, $a : () -'l_a-> ()], 'l_a, (), ())
                        =['l_a, $a : () -'l_a-> ()]
                     =((), ['l_a, $a : () -'l_a-> ()])
                  =((), ['l_a, $a : () -'l_a-> ()])
                  subtype(['l_a, $a : () -'l_a-> ()], (), ())
                  =['l_a, $a : () -'l_a-> ()]
               =['l_a, $a : () -'l_a-> ()]
            =['l_a]
         =[]
      =(∀ l. (() -l-> ()) -l-> (), [])
      locapplysynth([], client, ∀ l. (() -l-> ()) -l-> (), client)
      =((() -client-> ()) -client-> (), [])
   =((() -client-> ()) -client-> (), [])
   typeapplysynth([], client, (() -client-> ()) -client-> (), ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
      typecheck([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client, () -client-> ())
         typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
            typesynth([], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
               typecheck([], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
                  typecheck(['l_b], client, λx @ 'l_b. x, ∀ t. t -'l_b-> t)
                     typecheck(['l_b, 'a], client, λx @ 'l_b. x, 'a -'l_b-> 'a)
                        subloc(['l_b, 'a], 'l_b, 'l_b)
                        =['l_b, 'a]
                        typecheck(['l_b, 'a, $b : 'a], 'l_b, $b, 'a)
                           typesynth(['l_b, 'a, $b : 'a], 'l_b, $b)
                           =('a, ['l_b, 'a, $b : 'a])
                           subtype(['l_b, 'a, $b : 'a], 'a, 'a)
                           =['l_b, 'a, $b : 'a]
                        =['l_b, 'a, $b : 'a]
                     =['l_b, 'a]
                  =['l_b]
               =[]
            =(∀ l. ∀ t. t -l-> t, [])
            locapplysynth([], client, ∀ l. ∀ t. t -l-> t, client)
            =(∀ t. t -client-> t, [])
         =(∀ t. t -client-> t, [])
         subtype([], ∀ t. t -client-> t, () -client-> ())
            subtype([▶ 'b, ∃ 'b], ∃ 'b -client-> ∃ 'b, () -client-> ())
               subtype([▶ 'b, ∃ 'b], (), ∃ 'b)
                  instantiateR([▶ 'b, ∃ 'b], (), 'b)
                  =[▶ 'b, ∃ 'b = ()]
               =[▶ 'b, ∃ 'b = ()]
               subtype([▶ 'b, ∃ 'b = ()], (), ())
               =[▶ 'b, ∃ 'b = ()]
               subloc([▶ 'b, ∃ 'b = ()], client, client)
               =[▶ 'b, ∃ 'b = ()]
            =[▶ 'b, ∃ 'b = ()]
         =[]
      =[]
   =((), [])
=((), [])
Type: ()
Context: []

Name: idid
Expr: ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client (((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server)
typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client (((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server))
   typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
      typesynth([], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
         typecheck([], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
            typecheck(['l_a], client, λx @ 'l_a. x, ∀ t. t -'l_a-> t)
               typecheck(['l_a, 'a], client, λx @ 'l_a. x, 'a -'l_a-> 'a)
                  subloc(['l_a, 'a], 'l_a, 'l_a)
                  =['l_a, 'a]
                  typecheck(['l_a, 'a, $a : 'a], 'l_a, $a, 'a)
                     typesynth(['l_a, 'a, $a : 'a], 'l_a, $a)
                     =('a, ['l_a, 'a, $a : 'a])
                     subtype(['l_a, 'a, $a : 'a], 'a, 'a)
                     =['l_a, 'a, $a : 'a]
                  =['l_a, 'a, $a : 'a]
               =['l_a, 'a]
            =['l_a]
         =[]
      =(∀ l. ∀ t. t -l-> t, [])
      locapplysynth([], client, ∀ l. ∀ t. t -l-> t, client)
      =(∀ t. t -client-> t, [])
   =(∀ t. t -client-> t, [])
   typeapplysynth([], client, ∀ t. t -client-> t, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server)
      typeapplysynth([∃ 'b], client, ∃ 'b -client-> ∃ 'b, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server)
         typecheck([∃ 'b], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server, ∃ 'b)
            typesynth([∃ 'b], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) server)
               typesynth([∃ 'b], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
                  typecheck([∃ 'b], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
                     typecheck([∃ 'b, 'l_b], client, λx @ 'l_b. x, ∀ t. t -'l_b-> t)
                        typecheck([∃ 'b, 'l_b, 'c], client, λx @ 'l_b. x, 'c -'l_b-> 'c)
                           subloc([∃ 'b, 'l_b, 'c], 'l_b, 'l_b)
                           =[∃ 'b, 'l_b, 'c]
                           typecheck([∃ 'b, 'l_b, 'c, $b : 'c], 'l_b, $b, 'c)
                              typesynth([∃ 'b, 'l_b, 'c, $b : 'c], 'l_b, $b)
                              =('c, [∃ 'b, 'l_b, 'c, $b : 'c])
                              subtype([∃ 'b, 'l_b, 'c, $b : 'c], 'c, 'c)
                              =[∃ 'b, 'l_b, 'c, $b : 'c]
                           =[∃ 'b, 'l_b, 'c, $b : 'c]
                        =[∃ 'b, 'l_b, 'c]
                     =[∃ 'b, 'l_b]
                  =[∃ 'b]
               =(∀ l. ∀ t. t -l-> t, [∃ 'b])
               locapplysynth([∃ 'b], client, ∀ l. ∀ t. t -l-> t, server)
               =(∀ t. t -server-> t, [∃ 'b])
            =(∀ t. t -server-> t, [∃ 'b])
            subtype([∃ 'b], ∀ t. t -server-> t, ∃ 'b)
               subtype([∃ 'b, ▶ 'd, ∃ 'd], ∃ 'd -server-> ∃ 'd, ∃ 'b)
                  instantiateR([∃ 'b, ▶ 'd, ∃ 'd], ∃ 'd -server-> ∃ 'd, 'b)
                     instantiateL([∃ 'l_c, ∃ 'f, ∃ 'e, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd], 'e, ∃ 'd)
                     =[∃ 'l_c, ∃ 'f, ∃ 'e, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e]
                     instantiateR([∃ 'l_c, ∃ 'f, ∃ 'e, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e], ∃ 'e, 'f)
                     =[∃ 'l_c, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e]
                     instantiateLocR([∃ 'l_c, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e], server, 'l_c)
                     =[∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e]
                  =[∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e]
               =[∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f, ▶ 'd, ∃ 'd = ∃ 'e]
            =[∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f]
         =[∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f]
      =(∃ 'b, [∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f])
   =(∃ 'b, [∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f])
=(∃ 'b, [∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f])
Type: ∃ 'f -server-> ∃ 'f
Context: [∃ 'l_c = server, ∃ 'f, ∃ 'e = ∃ 'f, ∃ 'b = ∃ 'e -∃ 'l_c-> ∃ 'f]

Name: idclientunit
Expr: ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client ()
typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client ())
   typesynth([], client, ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t) client)
      typesynth([], client, (Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
         typecheck([], client, Λl. λx @ l. x, ∀ l. ∀ t. t -l-> t)
            typecheck(['l_a], client, λx @ 'l_a. x, ∀ t. t -'l_a-> t)
               typecheck(['l_a, 'a], client, λx @ 'l_a. x, 'a -'l_a-> 'a)
                  subloc(['l_a, 'a], 'l_a, 'l_a)
                  =['l_a, 'a]
                  typecheck(['l_a, 'a, $a : 'a], 'l_a, $a, 'a)
                     typesynth(['l_a, 'a, $a : 'a], 'l_a, $a)
                     =('a, ['l_a, 'a, $a : 'a])
                     subtype(['l_a, 'a, $a : 'a], 'a, 'a)
                     =['l_a, 'a, $a : 'a]
                  =['l_a, 'a, $a : 'a]
               =['l_a, 'a]
            =['l_a]
         =[]
      =(∀ l. ∀ t. t -l-> t, [])
      locapplysynth([], client, ∀ l. ∀ t. t -l-> t, client)
      =(∀ t. t -client-> t, [])
   =(∀ t. t -client-> t, [])
   typeapplysynth([], client, ∀ t. t -client-> t, ())
      typeapplysynth([∃ 'b], client, ∃ 'b -client-> ∃ 'b, ())
         typecheck([∃ 'b], client, (), ∃ 'b)
            typesynth([∃ 'b], client, ())
            =((), [∃ 'b])
            subtype([∃ 'b], (), ∃ 'b)
               instantiateR([∃ 'b], (), 'b)
               =[∃ 'b = ()]
            =[∃ 'b = ()]
         =[∃ 'b = ()]
      =(∃ 'b, [∃ 'b = ()])
   =(∃ 'b, [∃ 'b = ()])
=(∃ 'b, [∃ 'b = ()])
Type: ()
Context: [∃ 'b = ()]

Name: monoidclientunit
Expr: ((Λl. λx @ l. x) : ∀ l. () -l-> ()) client ()
typesynth([], client, ((Λl. λx @ l. x) : ∀ l. () -l-> ()) client ())
   typesynth([], client, ((Λl. λx @ l. x) : ∀ l. () -l-> ()) client)
      typesynth([], client, (Λl. λx @ l. x) : ∀ l. () -l-> ())
         typecheck([], client, Λl. λx @ l. x, ∀ l. () -l-> ())
            typecheck(['l_a], client, λx @ 'l_a. x, () -'l_a-> ())
               subloc(['l_a], 'l_a, 'l_a)
               =['l_a]
               typecheck(['l_a, $a : ()], 'l_a, $a, ())
                  typesynth(['l_a, $a : ()], 'l_a, $a)
                  =((), ['l_a, $a : ()])
                  subtype(['l_a, $a : ()], (), ())
                  =['l_a, $a : ()]
               =['l_a, $a : ()]
            =['l_a]
         =[]
      =(∀ l. () -l-> (), [])
      locapplysynth([], client, ∀ l. () -l-> (), client)
      =(() -client-> (), [])
   =(() -client-> (), [])
   typeapplysynth([], client, () -client-> (), ())
      typecheck([], client, (), ())
      =[]
   =((), [])
=((), [])
Type: ()
Context: []

Name: idclientunitnotype
Expr: (Λl. λx @ l. x) client ()
typesynth([], client, (Λl. λx @ l. x) client ())
   typesynth([], client, (Λl. λx @ l. x) client)
      typesynth([], client, Λl. λx @ l. x)
         typesynth([▶ 'l_a, 'l_a], client, λx @ 'l_a. x)
            typecheck([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, $a, ∃ 'b)
               typesynth([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, $a)
               =(∃ 'a, [▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a])
               subtype([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], ∃ 'a, ∃ 'b)
                  instantiateL([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'a, ∃ 'b)
                  =[▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b = ∃ 'a, $a : ∃ 'a]
               =[▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b = ∃ 'a, $a : ∃ 'a]
            =[▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b = ∃ 'a, $a : ∃ 'a]
         =(∃ 'a -'l_a-> ∃ 'b, [▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b = ∃ 'a])
      =(∀ 'l_a. ∃ 'a -'l_a-> ∃ 'b, [∃ 'a, ∃ 'b = ∃ 'a])
      locapplysynth([∃ 'a, ∃ 'b = ∃ 'a], client, ∀ 'l_a. ∃ 'a -'l_a-> ∃ 'a, client)
      =(∃ 'a -client-> ∃ 'a, [∃ 'a, ∃ 'b = ∃ 'a])
   =(∃ 'a -client-> ∃ 'a, [∃ 'a, ∃ 'b = ∃ 'a])
   typeapplysynth([∃ 'a, ∃ 'b = ∃ 'a], client, ∃ 'a -client-> ∃ 'a, ())
      typecheck([∃ 'a, ∃ 'b = ∃ 'a], client, (), ∃ 'a)
         typesynth([∃ 'a, ∃ 'b = ∃ 'a], client, ())
         =((), [∃ 'a, ∃ 'b = ∃ 'a])
         subtype([∃ 'a, ∃ 'b = ∃ 'a], (), ∃ 'a)
            instantiateR([∃ 'a, ∃ 'b = ∃ 'a], (), 'a)
            =[∃ 'a = (), ∃ 'b = ∃ 'a]
         =[∃ 'a = (), ∃ 'b = ∃ 'a]
      =[∃ 'a = (), ∃ 'b = ∃ 'a]
   =(∃ 'a, [∃ 'a = (), ∃ 'b = ∃ 'a])
=(∃ 'a, [∃ 'a = (), ∃ 'b = ∃ 'a])
Type: ()
Context: [∃ 'a = (), ∃ 'b = ∃ 'a]

Name: impredicative_ididunit
Expr: (Λl. λid @ l. (id : ∀ t. t -l-> t) id ()) ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t)
typesynth([], client, (Λl. λid @ l. (id : ∀ t. t -l-> t) id ()) ((Λl. λx @ l. x) : ∀ l. ∀ t. t -l-> t))
   typesynth([], client, Λl. λid @ l. (id : ∀ t. t -l-> t) id ())
      typesynth([▶ 'l_a, 'l_a], client, λid @ 'l_a. (id : ∀ t. t -'l_a-> t) id ())
         typecheck([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, ($a : ∀ t. t -'l_a-> t) $a (), ∃ 'b)
            typesynth([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, ($a : ∀ t. t -'l_a-> t) $a ())
               typesynth([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, ($a : ∀ t. t -'l_a-> t) $a)
                  typesynth([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, $a : ∀ t. t -'l_a-> t)
                     typecheck([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a], 'l_a, $a, ∀ t. t -'l_a-> t)
                        typecheck([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], 'l_a, $a, 'c -'l_a-> 'c)
                           typesynth([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], 'l_a, $a)
                           =(∃ 'a, [▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c])
                           subtype([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], ∃ 'a, 'c -'l_a-> 'c)
                              instantiateL([▶ 'l_a, 'l_a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], 'a, 'c -'l_a-> 'c)
                                 instantiateR([▶ 'l_a, 'l_a, ∃ 'l_b, ∃ 'e, ∃ 'd, ∃ 'a = ∃ 'd -∃ 'l_b-> ∃ 'e, ∃ 'b, $a : ∃ 'a, 'c], 'c, 'd)
bidi-exe: The impossible happened! instantiateR: ([▶ 'l_a, 'l_a, ∃ 'l_b, ∃ 'e, ∃ 'd, ∃ 'a = ∃ 'd -∃ 'l_b-> ∃ 'e, ∃ 'b, $a : ∃ 'a, 'c], 'c, 'd)
CallStack (from HasCallStack):
  error, called at src/Type.hs:210:12 in bidi-0.1.0.0-2YE488XkexRCiPc9O4TXbA:Type
