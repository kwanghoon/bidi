Expr: (λx. x) : ∀ t. t → t
typesynth([], (λx. x) : ∀ t. t → t)
   typecheck([], λx. x, ∀ t. t → t)
      typecheck(['a], λx. x, 'a → 'a)
         typecheck(['a, $a : 'a], $a, 'a)
            typesynth(['a, $a : 'a], $a)
            =('a, ['a, $a : 'a])
            subtype(['a, $a : 'a], 'a, 'a)
            =['a, $a : 'a]
         =['a, $a : 'a]
      =['a]
   =[]
=(∀ t. t → t, [])
Type: ∀ t. t → t
Context: []

Expr: (λid. id ()) ((λx. x) : ∀ t. t → t)
typesynth([], (λid. id ()) ((λx. x) : ∀ t. t → t))
   typesynth([], λid. id ())
      typecheck([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], $a (), ∃ 'b)
         typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], $a ())
            typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], $a)
            =(∃ 'a, [▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a])
            typeapplysynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], ∃ 'a, ())
               typecheck([▶ 'a, ∃ 'd, ∃ 'c, ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], (), ∃ 'c)
                  typesynth([▶ 'a, ∃ 'd, ∃ 'c, ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], ())
                  =((), [▶ 'a, ∃ 'd, ∃ 'c, ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a])
                  subtype([▶ 'a, ∃ 'd, ∃ 'c, ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], (), ∃ 'c)
                     instantiateR([▶ 'a, ∃ 'd, ∃ 'c, ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], (), 'c)
                     =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a]
                  =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a]
               =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a]
            =(∃ 'd, [▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a])
         =(∃ 'd, [▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a])
         subtype([▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], ∃ 'd, ∃ 'b)
            instantiateL([▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b, $a : ∃ 'a], 'd, ∃ 'b)
            =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b = ∃ 'd, $a : ∃ 'a]
         =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b = ∃ 'd, $a : ∃ 'a]
      =[▶ 'a, ∃ 'd, ∃ 'c = (), ∃ 'a = ∃ 'c → ∃ 'd, ∃ 'b = ∃ 'd, $a : ∃ 'a]
   =(∀ 'e. (() → 'e) → 'e, [])
   typeapplysynth([], ∀ 'e. (() → 'e) → 'e, (λx. x) : ∀ t. t → t)
      typeapplysynth([∃ 'f], (() → ∃ 'f) → ∃ 'f, (λx. x) : ∀ t. t → t)
         typecheck([∃ 'f], (λx. x) : ∀ t. t → t, () → ∃ 'f)
            typesynth([∃ 'f], (λx. x) : ∀ t. t → t)
               typecheck([∃ 'f], λx. x, ∀ t. t → t)
                  typecheck([∃ 'f, 'g], λx. x, 'g → 'g)
                     typecheck([∃ 'f, 'g, $b : 'g], $b, 'g)
                        typesynth([∃ 'f, 'g, $b : 'g], $b)
                        =('g, [∃ 'f, 'g, $b : 'g])
                        subtype([∃ 'f, 'g, $b : 'g], 'g, 'g)
                        =[∃ 'f, 'g, $b : 'g]
                     =[∃ 'f, 'g, $b : 'g]
                  =[∃ 'f, 'g]
               =[∃ 'f]
            =(∀ t. t → t, [∃ 'f])
            subtype([∃ 'f], ∀ t. t → t, () → ∃ 'f)
               subtype([∃ 'f, ▶ 'h, ∃ 'h], ∃ 'h → ∃ 'h, () → ∃ 'f)
                  subtype([∃ 'f, ▶ 'h, ∃ 'h], (), ∃ 'h)
                     instantiateR([∃ 'f, ▶ 'h, ∃ 'h], (), 'h)
                     =[∃ 'f, ▶ 'h, ∃ 'h = ()]
                  =[∃ 'f, ▶ 'h, ∃ 'h = ()]
                  subtype([∃ 'f, ▶ 'h, ∃ 'h = ()], (), ∃ 'f)
                     instantiateR([∃ 'f, ▶ 'h, ∃ 'h = ()], (), 'f)
                     =[∃ 'f = (), ▶ 'h, ∃ 'h = ()]
                  =[∃ 'f = (), ▶ 'h, ∃ 'h = ()]
               =[∃ 'f = (), ▶ 'h, ∃ 'h = ()]
            =[∃ 'f = ()]
         =[∃ 'f = ()]
      =(∃ 'f, [∃ 'f = ()])
   =(∃ 'f, [∃ 'f = ()])
=(∃ 'f, [∃ 'f = ()])
Type: ()
Context: [∃ 'f = ()]

Expr: ((λx. x) : ∀ t. t → t) ((λx. x) : ∀ t. t → t) : ∀ t. t → t
typesynth([], ((λx. x) : ∀ t. t → t) ((λx. x) : ∀ t. t → t) : ∀ t. t → t)
   typecheck([], ((λx. x) : ∀ t. t → t) ((λx. x) : ∀ t. t → t), ∀ t. t → t)
      typecheck(['a], ((λx. x) : ∀ t. t → t) ((λx. x) : ∀ t. t → t), 'a → 'a)
         typesynth(['a], ((λx. x) : ∀ t. t → t) ((λx. x) : ∀ t. t → t))
            typesynth(['a], (λx. x) : ∀ t. t → t)
               typecheck(['a], λx. x, ∀ t. t → t)
                  typecheck(['a, 'b], λx. x, 'b → 'b)
                     typecheck(['a, 'b, $a : 'b], $a, 'b)
                        typesynth(['a, 'b, $a : 'b], $a)
                        =('b, ['a, 'b, $a : 'b])
                        subtype(['a, 'b, $a : 'b], 'b, 'b)
                        =['a, 'b, $a : 'b]
                     =['a, 'b, $a : 'b]
                  =['a, 'b]
               =['a]
            =(∀ t. t → t, ['a])
            typeapplysynth(['a], ∀ t. t → t, (λx. x) : ∀ t. t → t)
               typeapplysynth(['a, ∃ 'c], ∃ 'c → ∃ 'c, (λx. x) : ∀ t. t → t)
                  typecheck(['a, ∃ 'c], (λx. x) : ∀ t. t → t, ∃ 'c)
                     typesynth(['a, ∃ 'c], (λx. x) : ∀ t. t → t)
                        typecheck(['a, ∃ 'c], λx. x, ∀ t. t → t)
                           typecheck(['a, ∃ 'c, 'd], λx. x, 'd → 'd)
                              typecheck(['a, ∃ 'c, 'd, $b : 'd], $b, 'd)
                                 typesynth(['a, ∃ 'c, 'd, $b : 'd], $b)
                                 =('d, ['a, ∃ 'c, 'd, $b : 'd])
                                 subtype(['a, ∃ 'c, 'd, $b : 'd], 'd, 'd)
                                 =['a, ∃ 'c, 'd, $b : 'd]
                              =['a, ∃ 'c, 'd, $b : 'd]
                           =['a, ∃ 'c, 'd]
                        =['a, ∃ 'c]
                     =(∀ t. t → t, ['a, ∃ 'c])
                     subtype(['a, ∃ 'c], ∀ t. t → t, ∃ 'c)
                        subtype(['a, ∃ 'c, ▶ 'e, ∃ 'e], ∃ 'e → ∃ 'e, ∃ 'c)
                           instantiateR(['a, ∃ 'c, ▶ 'e, ∃ 'e], ∃ 'e → ∃ 'e, 'c)
                              instantiateL(['a, ∃ 'g, ∃ 'f, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e], 'f, ∃ 'e)
                              =['a, ∃ 'g, ∃ 'f, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e = ∃ 'f]
                              instantiateR(['a, ∃ 'g, ∃ 'f, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e = ∃ 'f], ∃ 'f, 'g)
                              =['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e = ∃ 'f]
                           =['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e = ∃ 'f]
                        =['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g, ▶ 'e, ∃ 'e = ∃ 'f]
                     =['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
                  =['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
               =(∃ 'c, ['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g])
            =(∃ 'c, ['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g])
         =(∃ 'c, ['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g])
         subtype(['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g], ∃ 'g → ∃ 'g, 'a → 'a)
            subtype(['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g], 'a, ∃ 'g)
               instantiateR(['a, ∃ 'g, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g], 'a, 'g)
               =['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
            =['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
            subtype(['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g], 'a, 'a)
            =['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
         =['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
      =['a, ∃ 'g = 'a, ∃ 'f = ∃ 'g, ∃ 'c = ∃ 'f → ∃ 'g]
   =[]
=(∀ t. t → t, [])
Type: ∀ t. t → t
Context: []

Expr: (λid. (id : ∀ t. t → t) id ()) ((λx. x) : ∀ t. t → t)
typesynth([], (λid. (id : ∀ t. t → t) id ()) ((λx. x) : ∀ t. t → t))
   typesynth([], λid. (id : ∀ t. t → t) id ())
      typecheck([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], ($a : ∀ t. t → t) $a (), ∃ 'b)
         typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], ($a : ∀ t. t → t) $a ())
            typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], ($a : ∀ t. t → t) $a)
               typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], $a : ∀ t. t → t)
                  typecheck([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a], $a, ∀ t. t → t)
                     typecheck([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], $a, 'c → 'c)
                        typesynth([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], $a)
                        =(∃ 'a, [▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c])
                        subtype([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], ∃ 'a, 'c → 'c)
                           instantiateL([▶ 'a, ∃ 'a, ∃ 'b, $a : ∃ 'a, 'c], 'a, 'c → 'c)
                              instantiateR([▶ 'a, ∃ 'e, ∃ 'd, ∃ 'a = ∃ 'd → ∃ 'e, ∃ 'b, $a : ∃ 'a, 'c], 'c, 'd)
bidi-exe: The impossible happened! instantiateR: ([▶ 'a, ∃ 'e, ∃ 'd, ∃ 'a = ∃ 'd → ∃ 'e, ∃ 'b, $a : ∃ 'a, 'c], 'c, 'd)
CallStack (from HasCallStack):
  error, called at src/Type.hs:138:12 in bidi-0.1.0.0-2YE488XkexRCiPc9O4TXbA:Type
